openapi: 3.0.3
info:
  title: UBKG API
  description: The UBKG API provides REST endpoints that return results from queries against an instance of the [Unified Biomedical Knowledge Graph (UBKG)](https://ubkg.docs.xconsortia.org/). To prevent exceeding service timeouts or payload limits, some endpoints are throttled in both execution time and in the size of its response payload--e.g., to a maximum execution time of 15 seconds and a maximum payload of 9 MB.
  version: "2.0"
  contact:
    name: GitHub repository
    url: https://github.com/x-atlas-consortia/ubkg-api
servers:
  - url: https://ontology.api.hubmapconsortium.org/
    description: Production server
  - url: https://ontology-api.dev.hubmapconsortium.org/
    description: Development server
paths:
  /codes/{code_id}/codes:
    get:
      summary:  A Concept node can have CODE relationships with (links to) Code nodes from multiple sources (SABs). For example, the Code SNOMEDCT_US:254837009 links to the Concept with identifier C0006142; Concept C0006142 also links to Codes NCI:C9335 and MSH:D001943. This endpoint returns information on Code nodes that link to the Concept node to which the specified code links, subject to constraints specified in parameters.
      operationId: codes_code_id_codes_get
      parameters:
        - name: code_id
          in: path
          required: true
          description: the identifier for a Code node, in format _SAB_:_code_ (or SAB%3Acode) where _SAB_ is an identifier for the source of the code.
          schema:
            type: string
            example: SNOMEDCT_US:254837009
        - name: sab
          in: query
          required: false
          description: The set of sources (SABs) to which to limit the set of Codes that share links to the same Concept to which the Code with CodeID=_code_id_ links. This set can be specified either a list of values delimited with URL-encoded commas (e.g., ?sab=SAB1%2CSAB2%2SAB3) or with individual key-value pairs (e.g., ?sab=SAB1&sab=SAB2&SAB=SAB3).
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
              example: NCI,MDR
            default: []
      responses:
        '200':
          description: An array of objects corresponding to Code nodes that share links to the Concept associated with the specified Code, subject to constraints specified in parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CodesCodesObj'
        '400':
          description: invalid parameter name
        '404':
          description: no Codes for the specified parameters (_code_id_ and _sab_)
        '5XX':
          description: Unknown error
  /codes/{code_id}/concepts:
    get:
      operationId: codes_code_id_concepts_get
      summary: A Code node can have CODE relationships with (links to) multiple Concept nodes. For example, the Code with identifier SNOMEDCT_US:79962008 links to 5 different concepts. This endpoint returns the set of Concept nodes that have CODE relationships with the specified Code node.
      parameters:
        - name: code_id
          in: path
          required: true
          description: The identifier for the Code node, in format _SAB_:_CODE_ (or SAB%3Acode), where _SAB_ is an identifier for the source of the code. (%3A = colon)
          schema:
            type: string
            example: SNOMEDCT_US:79962008
      responses:
        '200':
          description: An array of Concept nodes that have CODE relationships with the specified Code node
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConceptDetail'
        '404':
          description: no Concept nodes for the specified Code
        '5XX':
          description: Unknown error
  /concepts/subgraph:
    get:
      operationId: concepts_subgraph_get
      summary: Returns a subgraph--the set of pairs of Concept nodes that are connected by a set of specified relationship types defined by a set of specified sources. For example, the endpoint can return the set of all pairs of nodes that are linked by UBERON's "part_of" relationship.
      parameters:
        - name: sab
          in: query
          required: true
          description: The set of sources (SABs) to which to limit the relationships in the subgraph. Can be either a list of values delimited with URL-encoded commas (e.g., ?sab=SAB1%2CSAB2%2SAB3) or with individual key-value pairs (e.g., ?sab=SAB1&sab=SAB2&SAB=SAB3).
          schema:
            type: string
            example: SNOMEDCT_US
        - name: rel
          in: query
          required: true
          description: The set of relationship types to which to limit the relationships in the subgraph. Can be either a list of values delimited with URL-encoded commas (e.g., ?rel=relationship_type11%2Crelationship_type2) or individual key-value pairs (e.g., ?rel=relationship_type1&rel=relationship_type2)
          schema:
            type: string
            example: isa
        - name: skip
          in: query
          required: false
          description: the number of paths to skip in the returned set. The value must be non-negative. The default value is 0.
          schema:
            type: string
            example: 0
        - name: limit
          in: query
          required: false
          description: the maximum number of paths to return. The value must be non-negative. The default value is the maximum number of rows specified by configuration.
          schema:
            type: string
            example: 10
      responses:
        '200':
          description: Return an array of pairs of Concepts linked by the specified relationships from the specified SABs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSubgraph'
        '400':
          description: invalid parameter name; missing required parameter name; non-numeric parameter value; negative value; incompatible version of neo4j (this endpoint requires at least 5.11.0)
        '404':
          description: No subgraph for specified relationship types. Includes responses from queries with execution times that exceed the maximum.
        '5XX':
          description: Unknown error
  /concepts/{concept_id}/codes:
    get:
      operationId: concepts_concept_id_codes_get
      summary: A Concept node can have CODE relationships with (links to) multiple Code nodes. This endpoint returns information on the set of Code nodes that link directly to the specified Concept, subject to constraints specified in parameters.
      parameters:
        - name: concept_id
          in: path
          required: true
          description: The identifier for the Concept (also known as the Concept Unique Identifier, or CUI)
          schema:
            type: string
            example: C0678222
        - name: sab
          in: query
          required: false
          description: The set of sources (SABs) to which to limit the set of Codes that link to the specified Concept. Can be either a list of values delimited with URL-encoded commas (e.g., ?sab=SAB1%2CSAB2%2SAB3) or with individual key-value pairs (e.g., ?sab=SAB1&sab=SAB2&SAB=SAB3).
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
              example: MEDLINEPLUS,MSH,MEDCIN
            default: []
      responses:
        '200':
          description: An array of code_ids in format _SAB_:_CODE for the Codes that link to the specified Concept, subject to constraints specified in parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: CHV 0000052645
        '400':
          description: invalid parameter name
        '404':
          description: no Codes for the specified parameters (_concept_id_ and _sab_)
        '5XX':
          description: Unknown error
  /concepts/{concept_id}/concepts:
    get:
      operationId: concepts_concept_id_concepts_get
      summary: Returns the set of Concepts that have direct relationships with the specified Concept.
      parameters:
        - name: concept_id
          in: path
          required: true
          description: The concept identifier (also known as Concept Unique Identifier, or CUI)
          schema:
            type: string
            example: C0006142
      responses:
        '200':
          description: An array of information on Concepts that have relationships with the specified Concept
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SabRelationshipConceptTerm'
        '404':
          description: no Concepts that have relationships with the specified Concept
        '5XX':
          description: Unknown error
  /concepts/{concept_id}/definitions:
    get:
      operationId: concepts_concept_id_definitions_get
      summary: Returns a list of Definitions for a Concept. A Definition is usually defined for a Code by a source (SAB); however, in the UBKG, the Definition is associated with the Code's linked Concept. Thus, a Concept may have multiple Definitions.
      parameters:
        - name: concept_id
          description: Identifier (also known as a Concept Unique Identifier) for a Concept.
          in: path
          required: true
          schema:
            type: string
            example: C0006142
      responses:
        '200':
          description: An array of Definitions associated with the Concept.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SabDefinition'
        '404':
          description: No Definitions associated with the Concept _query_concept_id_.
        '5XX':
          description: Unknown error
  /concepts/{identifier}/nodes:
    get:
      operationId: concepts_search_nodes_get
      summary: Returns a set of "Concept node" objects for Concept nodes that "match" a search term. A Concept node in the UBKG is the origin of a subgraph that links the Concept node to a set of Code, Term, Definition, and Semantic Type nodes. A Concept node object represents information extracted from all of the nodes in the Concept node's subgraph. A "match" is the union of the set of matches on text-based properties of nodes in the subgraph that originates from a Concept node--e.g., the preferred term for the Concept; a term for a Code linked to the concept; etc.
      parameters:
        - name: identifier
          in: path
          required: true
          description: The string to match against properties related to a Concepts (i.e. properties of the nodes in the subgraph that originate from Concept nodes). Special characters in search should be URL-encoded (%20 = space; %3A = colon, %2C = comma).
          schema:
            type: string
            example: Cells
      responses:
        '200':
          description: The set of Concept node objects that match the search term.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptNodes'
        '404':
          description: No Concepts that match the search term
        '5XX':
          description: Unknown error
  /concepts/{concept_id}/paths/expand:
    get:
      operationId: concepts_paths_expand_get
      summary: Returns a set of paths originating from the specified Concept, subject to constraints specified in parameters.
      parameters:
        - name: concept_id
          in: path
          required: true
          description: The identifier (also known as Concept Unique Identifier, or CUI) for the Concept from which paths originate.
          schema:
            type: string
            example: C2720507
        - name: sab
          in: query
          required: true
          description: The set of sources (SABs) to which to limit the relationships in the set of expanded paths. Can be either a list of values delimited with URL-encoded commas (e.g., ?sab=SAB1%2CSAB2%2SAB3) or with individual key-value pairs (e.g., ?sab=SAB1&sab=SAB2&SAB=SAB3).
          schema:
            type: string
            example: SNOMEDCT_US
        - name: rel
          in: query
          required: true
          description: The set of relationship types to which to limit the relationships in the set of expanded paths. Can be either a list of values delimited with URL-encoded commas (e.g., ?rel=relationship_type11%2Crelationship_type2) or individual key-value pairs (e.g., ?rel=relationship_type1&rel=relationship_type2)
          schema:
            type: string
            example: isa
        - name: mindepth
          in: query
          required: false
          description: The minimum number of hops in the returned set of expanded paths--e.g., mindepth=2 directs the endpoint to return paths that have at least 2 hops. The minimum must be non-negative and less than the value of _maxdepth_. The default value is 1. Large values of mindepth may result in long queries that exceed the execution time limits.
          schema:
            type: string
            example: 1
        - name: maxdepth
          in: query
          required: false
          description: The maximum number of hops in the returned set of expanded paths--e.g., maxdepth=4 directs the endpoint to return paths that have no more than 4 hops. The maximum must be non-negative. The default value is _mindepth_ + 2. Large values of maxdepth may result in long queries that exceed the execution time limits.
          schema:
            type: string
            example: 3
        - name: skip
          in: query
          required: false
          description: the number of paths to skip in the returned set. The value must be non-negative. The default value is 0.
          schema:
            type: string
            example: 0
        - name: limit
          in: query
          required: false
          description: the maximum number of paths to return. The value must be non-negative. The default value is the maximum number of rows specified by configuration.
          schema:
            type: string
            example: 10
      responses:
        '200':
          description: Return the Concepts in all paths originating from the specified Concept, subject to constraints. Each path is an ordered set of objects representing hops away from the originating concept. Each hop in a path represents a relationship between two concepts. For example, the path (A)-[r]->(B)-[r]->(C) has 2 hops between Concept C and Concept A.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptPaths'
        '400':
          description: invalid parameter name; missing required parameter name; non-numeric parameter value; negative value; mindepth > maxdepth
        '404':
          description: No Concepts with paths originating from the specified concept and set of parameters. Includes responses from queries with execution times that exceed the maximum.
        '5XX':
          description: Unknown error
  /concepts/{concept_id}/paths/trees:
    get:
      operationId: concepts_trees_get
      summary: Return information on the Concepts in the spanning tree that originates from a specified Concept, subject to constraints on relationship type, relationship source, and range of path depths. A spanning tree is the set of paths originating from node that traverse all of the other nodes of a graph.
      parameters:
        - name: concept_id
          in: path
          required: true
          description: The concept identifier (also known as Concept Unique Identifier, or CUI) of the origin of the spanning tree.
          schema:
            type: string
            example: C0006142
        - name: sab
          in: query
          required: true
          description: The set of sources (SABs) to which to limit the relationships in the set of expanded paths. Can be either a list of values delimited with URL-encoded commas (e.g., ?sab=SAB1%2CSAB2%2SAB3) or with individual key-value pairs (e.g., ?sab=SAB1&sab=SAB2&SAB=SAB3).
          schema:
            type: string
            example: SNOMEDCT_US
        - name: rel
          in: query
          required: true
          description: The set of relationship types to which to limit the relationships in the set of expanded paths. Can be either a list of values delimited with URL-encoded commas (e.g., ?rel=relationship_type11%2Crelationship_type2) or individual key-value pairs (e.g., ?rel=relationship_type1&rel=relationship_type2).
          schema:
            type: string
            example: isa
        - name: mindepth
          in: query
          required: false
          description: The minimum number of hops in the spanning tree--e.g., mindepth=1 directs the endpoint to return paths that have at least 1 hop. The minimum must be non-negative and less than the value of _maxdepth_. The only allowed values are 0 or 1. The default value is 0.
          schema:
            type: integer
            enum:
              - 0
              - 1
            default: 0
        - name: maxdepth
          in: query
          required: false
          description: The maximum number of hops in spanning tree--e.g., maxdepth=4 directs the endpoint to return paths that have no more than 4 hops. The maximum must be non-negative. The default value is _mindepth_ + 2. Large values of maxdepth may result in long queries that exceed the execution time limits.
          schema:
            type: string
            example: 3
        - name: skip
          in: query
          required: false
          description: the number of paths to skip in the returned set. The value must be non-negative. The default value is 0.
          schema:
            type: string
            example: 0
        - name: limit
          in: query
          required: false
          description: the maximum number of paths to return. The value must be non-negative. The default value is the maximum number of rows specified by configuration.
          schema:
            type: string
            example: 10
      responses:
        '200':
          description: Return information the paths in the spanning tree that originates from the specified Concept, subject to constraints on relationship type, relationship source, and spanning depth. A path is an ordered set of objects representing hops away from the originating concept. Each hop represents a relationship between two concepts. For example, the path (A)-[r]->(B)-[r]->(C) has 2 hops between Concept C and Concept A.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptPaths'
        '400':
          description: invalid parameter name; missing required parameter name; non-numeric parameter value; negative value; mindepth > maxdepth
        '404':
          description: No Concepts in a spanning tree originating from specified Concept subject to constraints from parameters
        '5XX':
          description: Unknown error
  /concepts/{origin_concept_id}/{terminus_concept_id}/shortestpath:
    get:
      operationId: concepts_shortestpath_get
      summary: Return the shortest path between two Concepts, using Dykstra's algorithm with default weights, subject to constraints on relationship types (rel) and relationship sources (sab).
      parameters:
        - name: origin_concept_id
          in: path
          required: true
          description: The concept identifier (also known as Concept Unique Identifier, or CUI) for the origin of the shortestpath calculation.
          schema:
            type: string
            example: C2720507
        - name: terminus_concept_id
          in: path
          required: true
          description: The concept identifier (also known as Concept Unique Identifier, or CUI) for the terminus of the shortestpath calculation.
          schema:
            type: string
            example: C1272753
        - name: sab
          in: query
          required: true
          description: The set of sources (SABs) to which to limit the relationships in the set of expanded paths. Can be either a list of values delimited with URL-encoded commas (e.g., ?sab=SAB1%2CSAB2%2SAB3) or with individual key-value pairs (e.g., ?sab=SAB1&sab=SAB2&SAB=SAB3). (%2C = comma)
          schema:
            type: string
            example: SNOMEDCT_US
        - name: rel
          in: query
          required: true
          description: The set of relationship types to which to limit the relationships in the set of expanded paths. Can be either a list of values delimited with URL-encoded commas (e.g., ?rel=relationship_type11%2Crelationship_type2) or individual key-value pairs (e.g., ?rel=relationship_type1&rel=relationship_type2). (%2C = comma)
          schema:
            type: string
            example: isa
      responses:
        '200':
          description: Returns the ordered set of Concepts involved in the shortest path, subject to constraints for relationship type and source. This path is an ordered set of objects representing hops away from the originating concept, to the terminal concept. Each hop in a path represents a relationship between two concepts. For example, the path (A)-[r]->(B)-[r]->(C) has 2 hops between Concept C and Concept A.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptShortestPath'
        '400':
          description: invalid parameter name; missing required parameter name
        '404':
          description: No shortest path between _origin_concept_id_ and _terminus_concept_id_ with relationship types in _rel_ filtered by sources in _sab_.
        '5XX':
          description: Unknown error
  /database/server:
    get:
      summary: Returns basic information on the UBKG neo4j database.
      operationId: database_info_server_get
      responses:
        '200':
          description: basic information on the UBKG neo4j database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseInfo'
  /node_types/counts:
    get:
      summary: Returns counts of nodes in the database by node type (label).
      operationId: node_type_count_get
      responses:
        '200':
          description: List of counts by node type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeTypeCount'
        '404':
          description: No nodes with label
        '5XX':
          description: Unknown error
  /node_types/counts/{node_type}:
    get:
      summary: Returns counts of nodes in the database for a specified node type (label).
      operationId: node_type_count_node_id_get
      parameters:
        - name: node_type
          in: path
          required: true
          description: a node type
          schema:
            type: string
            example: Code
      responses:
        '200':
          description: List of counts by node type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeTypeCount'
        '404':
          description: No nodes with label
        '5XX':
          description: Unknown error
  /node_types/counts_by_sab:
    get:
      summary: Returns counts of nodes in the database for all node types (labels), grouped by source (SAB). When executed against a large UBKG instance, the execution time of the underlying query will likely exceed the server host timeout. This endpoint exists as a convenience; a custom 400 message will explain the issue and suggest alternatives.
      operationId: node_type_count_by_sab_get
      parameters:
        - name: sab
          in: query
          required: false
          description: The set of sources (SABs) to which to limit counts by node_type.
          schema:
            type: string
            example: NCI
      responses:
        '400':
          description: The response to this endpoint is likely to exceed timeout and so will not be attempted. Execute the node_types/counts_by_sab/(node_type) endpoint with the name of a node type (e.g., Codes). To obtain names of node types, execute the node_types/counts endpoint.
        '5XX':
          description: Unknown error
  /node_types/counts_by_sab/{node_type}:
    get:
      summary: Returns counts of nodes in the database for a specified node type (label), grouped by source (SAB), subject to constraints specified in parameters.
      operationId: node_type_count_by_sab_node_type_get
      parameters:
        - name: node_type
          in: path
          required: true
          description: a node type
          schema:
            type: string
            example: Code
        - name: sab
          in: query
          required: false
          description: The set of sources (SABs) to which to limit counts by node_type. Can be either a list of values delimited with URL-encoded commas (e.g., ?sab=SAB1%2CSAB2%2SAB3) or with individual key-value pairs (e.g., ?sab=SAB1&sab=SAB2&SAB=SAB3).
          schema:
            type: string
            example: NCI
      responses:
        '200':
          description: List of counts by node type, grouped by source, subject to constraints specified in parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeTypeSabCount'
        '400':
          description: invalid parameter
        '404':
          description: No nodes with label
        '5XX':
          description: Unknown error
  /property_types:
    get:
      operationId: property_types_get
      summary: Returns the set of property types (keys) for all nodes and relationships
      responses:
        '200':
          description: List of property types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyTypes'
        '5XX':
          description: Unknown error
  /relationship_types:
    get:
      operationId: relationship_types_get
      summary: Returns the set of relationship types
      responses:
        '200':
          description: List of relationship types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipTypes'
        '5XX':
          description: Unknown error
  /semantics/semantic_types:
    get:
      operationId: semantics_semantic_types_get
      summary: Returns the complete set of Semantic Type nodes, subject to constraints specified in parameters.
      parameters:
        - name: skip
          in: query
          required: false
          description: the number of Semantic Types to skip in the returned set. The value must be non-negative. The default value is 0.
          schema:
            type: string
            example: 0
        - name: limit
          in: query
          required: false
          description: the maximum number of Semantic Types to return. The value must be non-negative. The default value is the maximum number of rows specified by configuration.
          schema:
            type: string
            example: 10
      responses:
        '200':
          description: Returns the set of Semantic Type nodes, subject to constaints specified in the parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SemanticTypes'
        '400':
          description: invalid parameter name; non-numeric parameter value; negative value
        '404':
          description: No subtypes of the specified Semantic Type.
        '5XX':
          description: Unknown error
  /semantics/semantic_types/{identifier}:
    get:
      operationId: semantics_identifier_semantic_types_get
      summary: Returns the Semantic Type node that matches the identifier, subject to constraints specified in parameters.
      parameters:
        - name: identifier
          in: path
          required: true
          description: The identifier for a Semantic Type node. An identifier may be either a URL-encoded string corresponding to either the name of the Semantic Type (e.g., Anatomical%20Structure, with %20 representing the space character) or the Type Unique Identifier (TUI) of the Semantic Type (e.g., T017). (%20 = space; %2C = comma; %3A = colon)
          schema:
            type: string
            example: T017
        - name: skip
          in: query
          required: false
          description: the number of paths to skip in the returned set. The value must be non-negative. The default value is 0.
          schema:
            type: string
            example: 0
        - name: limit
          in: query
          required: false
          description: the maximum number of Semantic Types to return. The value must be non-negative. The default value is the maximum number of rows specified by configuration.
          schema:
            type: string
            example: 10
      responses:
        '200':
          description: Returns the set of Semantic Type nodes, subject to constaints specified in the parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SemanticTypes'
        '400':
          description: invalid parameter name; non-numeric parameter value; negative value
        '404':
          description: No subtypes of the specified Semantic Type.
        '5XX':
          description: Unknown error
  /semantics/semantic_subtypes/{identifier}:
    get:
      operationId: semantics_identifier_semantic_subtypes_get
      summary: Returns the set of Semantic Type nodes that are subtypes (have ISA_STY relationship with) the specified Semantic Type, subject to constraints specified in parameters.
      parameters:
        - name: identifier
          in: path
          required: true
          description: The identifier for a Semantic Type node. An identifier may be either a URL-encoded string corresponding to either the name of the Semantic Type (e.g., Anatomical%20Structure, with %20 representing the space character) or the Type Unique Identifier (TUI) of the Semantic Type (e.g., T017). (%20 = space; %2C = comma; %3A = colon)
          schema:
            type: string
            example: Anatomical%20Structure
        - name: skip
          in: query
          required: false
          description: the number of semantic sub-types to skip in the returned set. The value must be non-negative. The default value is 0.
          schema:
            type: string
            example: 0
        - name: limit
          in: query
          required: false
          description: the maximum number of semantic sub-types to return. The value must be non-negative. The default value is the maximum number of rows specified by configuration.
          schema:
            type: string
            example: 10
      responses:
        '200':
          description: Returns the set of Semantic Type nodes that are subtypes of the specified Semantic Type node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SemanticSubTypes'
        '400':
          description: invalid parameter name; non-numeric parameter value; negative value
        '404':
          description: No subtypes of the specified Semantic Type.
        '5XX':
          description: Unknown error
  /terms/{term_id}/codes:
    get:
      operationId: terms_term_id_codes_get
      summary: Returns a list of Code nodes with terms that exactly match the specified string. Terms can be of different types--e.g., preferred terms (PT), synonyms (SY), etc.
      parameters:
        - name: term_id
          in: path
          required: true
          description: The string to match. Subject to timeout.
          schema:
            type: string
            example: Breast cancer
      responses:
        '200':
          description: An array of Codes with terms that exactly match the specified string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TermtypeCode'
        '404':
          description: No Codes with terms matching the specified string.
        '5XX':
          description: Unknown error
  /terms/{term_id}/concepts:
    get:
      operationId: terms_term_id_concepts_get
      summary: Returns a list of Concept nodes with preferred terms that exactly match the specified string.
      parameters:
        - name: term_id
          in: path
          required: true
          description: The string to match
          schema:
            type: string
            example: Breast cancer
      responses:
        '200':
          description: An array of Concepts with preferred terms that exactly match the specified string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: C0794811
        '404':
          description: No Concepts with terms matching the specified string.
        '5XX':
          description: Unknown error
components:
  schemas:
    CodesCodesObj: # Schema name
      description: Code nodes that link to the same Concept node to which a specified Code links.
      type: object
      properties:
        concept:
          description: The CUI (Concept Unique Identifier) for the shared Concept node.
          type: string
          example: C0006142
        code:
          description: CodeID of a Code node, in format _SAB_:_CODE_
          type: string
          example: CCS 2.5
        SAB:
          description: an identifier for the source of the code. Corresponds to the Source Abbreviaion (SAB) of a Code in the UMLS.
          type: string
          example: CCF
    ConceptDetail:    # Schema name
      type: object
      description: Information on a Concept node.
      properties:
        concept:
          type: string
          description: Concept Unique Identifier (CUI) for the Concept node
          example: C0006142
        prefterm:
          type: string
          description: Preferred term for the Concept node.
          example: Malignant neoplasm of breast
    ConceptPaths: # Schema name
      type: object
      description: Represents the set of paths originating from a Concept. Each path is an ordered set of objects representing hops away from the originating concept. Each hop represents a relationship between two concepts. For example, the path (A)-[r]->(B)-[r]->(C) has 2 hops between Concept C and Concept A.
      properties:
        origin:
          type: object
          description: the origin of all paths
          properties:
            concept:
              type: string
              description: the identifier for the origin Concept
              example: C2720507
            prefterm:
              type: string
              description: the preferred term for the origin Concept
              example: SNOMED CT Concept (SNOMED RT+CTV3)
        paths:
          type: array
          description: set of paths originating from a concept.
          items:
            type: object
            properties:
              position:
                type: integer
                description: The position of the path in the complete set of paths that originate from the specified Concept, ordered in terms of Depth First Search (DFS). The item property is invariant with respect to parameters such as skip or limit, but depends on parameters such as mindepth and maxdepth. For example, if skip = 5, the position of the first path will be 6.
                example: 1
              length:
                type: integer
                description: the length of the path--i.e., the number of items in the _path_ array.
                example: 1
              hops:
                type: array
                description: the set of individual hops that comprise the path. A hop represents two nodes linked by a relationship.
                items:
                  type: object
                  properties:
                    hop:
                      type: integer
                      description: the position of the hop in the path--i.e., the distance of the hop from the originating Concept.
                      example: 1
                    sab:
                      type: string
                      description: the identifier for the source of the relationship involved in the hop.
                      example: SNOMEDCT_US
                    source:
                      type: object
                      description: the source of the hop--i.e., the Concept node from which the relationship starts
                      properties:
                        concept:
                          type: string
                          description: the identifier for the source Concept
                          example: C0013227
                        prefterm:
                          type: string
                          description: the preferred term for the source Concept
                          example: Pharmaceutical Preparations
                    target:
                      type: object
                      description: the target of the hop--i.e., the Concept node in which the relationship ends
                      properties:
                        concept:
                          type: string
                          description: the identifier for the target Concept
                          example: C2720507
                        prefterm:
                          type: string
                          description: the preferred term for the target Concept
                          example: SNOMED CT Concept (SNOMED RT+CTV3)
                    type:
                      type: string
                      description: the type of relationship involved in the hop.
                      example: isa
    ConceptShortestPath: # Schema name
      type: object
      description: Represents the shortest path between two Concepts. The path is an ordered set of objects representing hops away from the originating concept. Each hop represents a relationship between two concepts. For example, the path (A)-[r]->(B)-[r]->(C) has 2 hops between Concept C and Concept A.
      properties:
        origin:
          type: object
          description: the origin of the shortest path
          properties:
            concept:
              type: string
              description: the identifier for the origin Concept
              example: C2720507
            prefterm:
              type: string
              description: the preferred term for the origin Concept
              example: SNOMED CT Concept (SNOMED RT+CTV3)
        terminus:
          type: object
          description: the terminal Concept in the shortest path
          properties:
            concept:
              type: string
              description: the identifier for the terminal Concept
              example: C1272753
            prefterm:
              type: string
              description: the preferred term for the terminal Concept
              example: Institution (social concept)
        paths:
          type: array
          description: set of paths originating from a concept.
          items:
            type: object
            properties:
              position:
                type: integer
                description: Always 1.
                example: 1
              length:
                type: integer
                description: the length of the path--i.e., the number of items in the _path_ array.
                example: 2
              hops:
                type: array
                description: the set of individual hops that comprise the path. A hop represents two nodes linked by a relationship.
                items:
                  type: object
                  properties:
                    hop:
                      type: integer
                      description: the position of the hop in the path--i.e., the distance of the hop from the originating Concept.
                      example: 1
                    sab:
                      type: string
                      description: the identifier for the source of the relationship involved in the hop.
                      example: SNOMEDCT_US
                    source:
                      type: object
                      description: the source of the hop--i.e., the Concept node from which the relationship starts
                      properties:
                        concept:
                          type: string
                          description: the identifier for the source Concept
                          example: C0013227
                        prefterm:
                          type: string
                          description: the preferred term for the source Concept
                          example: Pharmaceutical Preparations
                    target:
                      type: object
                      description: the target of the hop--i.e., the Concept node in which the relationship ends
                      properties:
                        concept:
                          type: string
                          description: the identifier for the target Concept
                          example: C2720507
                        prefterm:
                          type: string
                          description: the preferred term for the target Concept
                          example: SNOMED CT Concept (SNOMED RT+CTV3)
                    type:
                      type: string
                      description: the type of relationship involved in the hop.
                      example: isa
    ConceptSubgraph: # Schema name
      type: object
      description: Represents a subgraph--a set of one-hop paths involving a set of relationship types. The path is an ordered set of objects representing hops away from the originating concept. Each hop represents a relationship between two concepts. For example, the path (A)-[r]->(B)-[r]->(C) has 2 hops between Concept C and Concept A.
      properties:
        paths:
          type: array
          description: set of paths originating from a concept.
          items:
            type: object
            properties:
              position:
                type: integer
                description: The position of the path in the complete subgraph. The item property is invariant with respect to parameters such as skip or limit. For example, if skip = 5, the position of the first path in the response will be 6.
                example: 1
              length:
                type: integer
                description: Always 1.
                example: 1
              hops:
                type: array
                description: the set of individual hops that comprise the path. A hop represents two nodes linked by a relationship.
                items:
                  type: object
                  properties:
                    hop:
                      type: integer
                      description: the position of the hop in the path--i.e., the distance of the hop from the originating Concept.
                      example: 1
                    sab:
                      type: string
                      description: the identifier for the source of the relationship involved in the hop.
                      example: SNOMEDCT_US
                    source:
                      type: object
                      description: the source of the hop--i.e., the Concept node from which the relationship starts
                      properties:
                        concept:
                          type: string
                          description: the identifier for the source Concept
                          example: C0013227
                        prefterm:
                          type: string
                          description: the preferred term for the source Concept
                          example: Pharmaceutical Preparations
                    target:
                      type: object
                      description: the target of the hop--i.e., the Concept node in which the relationship ends
                      properties:
                        concept:
                          type: string
                          description: the identifier for the target Concept
                          example: C2720507
                        prefterm:
                          type: string
                          description: the preferred term for the target Concept
                          example: SNOMED CT Concept (SNOMED RT+CTV3)
                    type:
                      type: string
                      description: the type of relationship involved in the hop.
                      example: isa
    SabDefinition: # Schema name
      type: object
      description: A Definition associated with a Concept.
      properties:
        sab:
          type: string
          description: Source of a Definition.
          example: NCI
        definition:
          type: string
          description: The definition text.
          example: A primary or metastatic malignant neoplasm involving the breast. The vast majority of cases are carcinomas arising from the breast parenchyma or the nipple. Malignant breast neoplasms occur more frequently in females than in males.
    SabRelationshipConceptTerm: # Schema name
      type: object
      description: Information on a Concept that has a relationship with another Concept
      properties:
        sab:
          type: string
          description: The source of the relationship, such as a vocabulary or ontology, that asserts the relationship between concepts. Although relationships are usually described in terms of Codes, they actually exist between the Concepts that are linked to the Codes. For example, if an ontology SAB1 shows that code A has relationship r with code B, the associated concepts for A and B will have a relationship with type=r and SAB=SAB1.
          example: ICD10AM
        relationship:
          type: string
          description: the relationship type--e.g., "isa", "property_of"
          example: CHD
        concept:
          type: string
          description: the identifier for the Concept, also known as the Concept Unique Identifier (CUI)
          example: C0006826
        prefterm:
          type: string
          description: The preferred term for the Concept. Note that the preferred term for a Concept may be different than the preferred term for a Code that links to the Concept.
          example: Malignant Neoplasms
    TermtypeCode: # Schema name
      type: object
      description: A Code with a term that matches a specified string
      properties:
        termtype:
          type: string
          description: Term type--i.e., the relationship between the Code and the Term
          example: LA
        code:
          type: string
          description: Identifier for the Code ID, in the format _SAB_:_CODE_.
          example: LNC:LA14283-8
    SemanticTypes: # Schema name
      type: object
      description: Array of Semantic Type nodes
      properties:
        position:
          type: integer
          description: absolute position of the Semantic Type in the list of all possible values in the response. Invariant relative to skip--e.g., if skip = 5, the position of the first element in the list will be 6.
          example: 1
        semantic_types:
          type: array
          items:
            type: object
            properties:
              semantic_type:
                type: object
                description: A Semantic Type node
                properties:
                  def:
                    type: string
                    description: the definition for the Semantic Type
                    example: An anatomical structure that exists...
                  stn:
                    type: string
                    description: the Semantic Type's identifier in the Semantic Type Network
                    example: A1.2.1
                  sty:
                    type: string
                    description: the Semantic Type name
                    example: Embryonic Structure
                  tui:
                    type: string
                    description: the Type Unique Identifier (TUI) for the Semantic Type node
                    example: T018
    SemanticSubTypes: # Schema name
      type: object
      description: Array of Semantic Type nodes that are sub-types of a Semantic Type
      properties:
        position:
          type: integer
          description: absolute position of the Semantic Type in the list of all possible values in the response. Invariant relative to skip--e.g., if skip = 5, the position of the first element in the list will be 6.
          example: 1
        semantic_sub_types:
          type: array
          items:
            type: object
            properties:
              semantic_type:
                type: object
                description: A Semantic Type node that is a sub-type of a specified Semantic Type node
                properties:
                  def:
                    type: string
                    description: the definition for the Semantic Type
                    example: An anatomical structure that exists...
                  stn:
                    type: string
                    description: the Semantic Type's identifier in the Semantic Type Network
                    example: A1.2.1
                  sty:
                    type: string
                    description: the Semantic Type name
                    example: Embryonic Structure
                  tui:
                    type: string
                    description: the Type Unique Identifier (TUI) for the Semantic Type node
                    example: T018
    ConceptNodes: # Schema name
      type: object
      description: A set of "Concept node" objects that translate and consolidate information about Concept nodes in the UBKG. Each Concept node in the UBKG is the origin of a subgraph that links the Concept node to a set of Code, Term, Definition, and Semantic Type nodes. The Concept node object represents information extracted from all of the nodes in the Concept node's subgraph.
      properties:
        nodes:
          type: array
          description: Array of Concept node objects. Each Concept node object represents a Concept node as the origin of a subgraph of linked Code, Term, Definition, and Semantic Type nodes.
          items:
            type: object
            properties:
              node:
                type: object
                properties:
                  cui:
                    type: string
                    description: the identifier for the Concept node
                    example: C0007634
                  pref_term:
                    type: string
                    description: the preferred term for the Concept node, corresponding to a Term node that links to (has PREF_TERM relationship with) the Concept node.
                    example: Cells
                  codes:
                    type: array
                    description: Array of Code objects. Each Code object represents a Code node that links to (has CODE relationship with) the Concept node and its associated Terms.
                    items:
                      type: object
                      properties:
                        codeid:
                          type: string
                          description: the CodeID for the Code node, in format _SAB_:_CODE_
                          example: "CL:0000000"
                        sab:
                          type: string
                          description: the identifier for the source (SAB) that defined the code
                          example: CL
                        terms:
                          type: array
                          description: Array of Term nodes that link to the Code node.
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: Term string
                                example: cell
                              tty:
                                type: string
                                description: term type--i.e., the type of relationship between the Term node and the Code node.
                                example: PT_PATO
                  definitions:
                    type: array
                    description: Array of Definition objects. Each Definition object represents a Definition node that links to (has DEF relationship with) the Concept node. (If a SAB assigns a definition to a code, the UBKG represents the definition as a Definition node linked to the Concept node to which the Code node links.)
                    items:
                      type: object
                      properties:
                        def:
                          type: string
                          description: the definition string
                          example: A material entity of anatomical origin....
                        sab:
                          type: string
                          description: the identifier for the source (SAB) that provided the definition
                          example: CL
                  semantic_types:
                    type: array
                    description: Array of Semantic Type objects. Each Semantic Type object represents a Semantic Type node that links to (has STY relationship with) the Concept node.
                    items:
                      type: object
                      properties:
                        def:
                          type: string
                          description: the definition of the semantic type
                          example: The fundamental structural and functional unit of living organisms.
                        stn:
                          type: string
                          description: the Semantic Type's identifier in the Semantic Type Network
                          example: A1.2.1
                        sty:
                          type: string
                          description: the Semantic Type name
                          example: Embryonic Structure
                        tui:
                          type: string
                          description: the Type Unique Identifier (TUI) for the Semantic Type node
                          example: T018
    DatabaseInfo: # Schema name
      type: object
      description: basic information on the neo4j database server instance
      properties:
        version:
          type: string
          description: neo4j version
          example: "5.11.0"
        edition:
          type: string
          description: type of neo4j instance
          example: community
    NodeTypeCount: # Schema name
      type: object
      description: counts by node type
      properties:
        node_types:
          type: array
          items:
            type: object
            properties:
              total_count:
                type: integer
                description: Count of nodes with any of the labels in node_types. Equal to the total count of nodes in the database if no node_type was specified.
                example: 1650946
              node_type:
                type: object
                properties:
                  label:
                    type: string
                    description: the label for the node type
                    example: Code
                  count:
                    type: integer
                    description: count of nodes with the label
                    example: 16590946
    NodeTypeSabCount: # Schema name
      type: object
      description: counts by node type, grouped by SAB
      properties:
        node_types:
          type: array
          items:
            type: object
            properties:
              total_count:
                type: integer
                description: Count of nodes with any of the labels in node_types. Equal to the total count of nodes in the database if no filters were applied.
                example: 170947
              node_type:
                type: object
                properties:
                  label:
                    type: string
                    description: the label for the node type
                    example: Code
                  count:
                    type: integer
                    description: count of nodes with the label
                    example: 170947
                  sabs:
                    type: array
                    description: array of sources (SABs) for nodes with the specified node types
                    items:
                      type: object
                      properties:
                        sab:
                          type: string
                          description: source name
                          example: NCI
                        count:
                          type: integer
                          description: count of nodes from the SAB with the specified node type
                          example: 170947
    PropertyTypes: #Schema name
      type: object
      description: list of property types (keys)
      properties:
        property_types:
          description: list of property types
          type: array
          items:
            type: string
            description: a property type
            example: CODE
    RelationshipTypes: #Schema name
      type: object
      description: list of relationship types
      properties:
        relationship_types:
          description: list of relationship types
          type: array
          items:
            type: string
            description: relationship type
            example: isa

