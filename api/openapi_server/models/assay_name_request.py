# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.assay_name_request_name import AssayNameRequestName
from openapi_server import util

from openapi_server.models.assay_name_request_name import AssayNameRequestName  # noqa: E501

class AssayNameRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, application_context='HUBMAP'):  # noqa: E501
        """AssayNameRequest - a model defined in OpenAPI

        :param name: The name of this AssayNameRequest.  # noqa: E501
        :type name: AssayNameRequestName
        :param application_context: The application_context of this AssayNameRequest.  # noqa: E501
        :type application_context: str
        """
        self.openapi_types = {
            'name': AssayNameRequestName,
            'application_context': str
        }

        self.attribute_map = {
            'name': 'name',
            'application_context': 'application_context'
        }

        self._name = name
        self._application_context = application_context

    @classmethod
    def from_dict(cls, dikt) -> 'AssayNameRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AssayNameRequest of this AssayNameRequest.  # noqa: E501
        :rtype: AssayNameRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AssayNameRequest.


        :return: The name of this AssayNameRequest.
        :rtype: AssayNameRequestName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssayNameRequest.


        :param name: The name of this AssayNameRequest.
        :type name: AssayNameRequestName
        """

        self._name = name

    @property
    def application_context(self):
        """Gets the application_context of this AssayNameRequest.


        :return: The application_context of this AssayNameRequest.
        :rtype: str
        """
        return self._application_context

    @application_context.setter
    def application_context(self, application_context):
        """Sets the application_context of this AssayNameRequest.


        :param application_context: The application_context of this AssayNameRequest.
        :type application_context: str
        """
        allowed_values = ["HUBMAP", "SENNET", "hubmap", "sennet", "HuBMAP", "SenNet"]  # noqa: E501
        if application_context not in allowed_values:
            raise ValueError(
                "Invalid value for `application_context` ({0}), must be one of {1}"
                .format(application_context, allowed_values)
            )

        self._application_context = application_context
